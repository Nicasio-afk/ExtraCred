    .data
prompt_msg1:    .asciiz "Please enter a number L (> 20): "
prompt_msg2:    .asciiz "Please enter a number M (> 20): "
prompt_msg3:    .asciiz "Please enter a number N (> 20): "
error_msg:      .asciiz "Illegal Number!\n"
result_msg:     .asciiz "The Greatest Common Divisor (GCD) is: "

    .text
    .globl main
main:
    # Prompt the user for input
    li $v0, 4
    la $a0, prompt_msg1
    syscall

    # Read integer input for L
    li $v0, 5
    syscall
    move $s0, $v0

# Check if L is legal
check_L:
    bgt $s0, 20, prompt_M
    # If L is not legal, display error message and prompt again
    li $v0, 4
    la $a0, error_msg
    syscall
    # Prompt the user for input again
    li $v0, 4
    la $a0, prompt_msg1
    syscall
    # Read integer input for L
    li $v0, 5
    syscall

prompt_M:
    # Prompt the user for input
    li $v0, 4
    la $a0, prompt_msg2
    syscall
    # Read integer input for M
    li $v0, 5
    syscall
    move $s1, $v0

    # Check if M is legal
check_M:
    bgt $s1, 20, prompt_N
    # If M is not legal, display an error message and prompt again
    li $v0, 4
    la $a0, error_msg
    syscall
    # Prompt the user for input again
    li $v0, 4
    la $a0, prompt_msg2
    syscall
    # Read integer input for M
    li $v0, 5
    syscall
    move $s1, $v0
    j check_M

prompt_N:
    # Prompt the user for input
    li $v0, 4
    la $a0, prompt_msg3
    syscall

    # Read integer input for N
    li $v0, 5
    syscall
    move $s2, $v0

# Check if N is legal
check_N:
    bgt $s2, 20, calculate_GCD
    # If N is not legal, display an error message and prompt again
    li $v0, 4
    la $a0, error_msg
    syscall
    # Prompt the user for input again
    li $v0, 4
    la $a0, prompt_msg3
    syscall
    # Read integer input for N
    li $v0, 5
    syscall
    move $s2, $v0
    j check_N

calculate_GCD:
    # Calculate the Greatest Common Divisor (GCD)
    move $t0, $s0   # Copy L to $t0
    move $t1, $s1   # Copy M to $t1
    jal find_GCD    # Jump to the find_GCD function

    # Display the result
    li $v0, 4
    la $a0, result_msg
    syscall
    li $v0, 1
    move $a0, $t0   # Move the GCD to $a0 for printing
    syscall

    # Exit the program
    li $v0, 10
    syscall

find_GCD:
    # Euclidean algorithm to find GCD
    beqz $t1, end_find_GCD
    div $t0, $t1
    mfhi $t0
    move $t2, $t1
    move $t1, $t0
    move $t0, $t2
    j find_GCD

end_find_GCD:
    move $v0, $t0
    jr $ra
